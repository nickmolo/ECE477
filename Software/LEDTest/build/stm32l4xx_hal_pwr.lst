ARM GAS  /tmp/ccGJOy3d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32l4xx_hal_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_PWR_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_PWR_DeInit:
  26              	.LFB125:
  27              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c"
   1:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @file    stm32l4xx_hal_pwr.c
   4:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @version V1.1.1
   6:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @date    16-October-2015
   7:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   8:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   9:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
  10:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
  11:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           + Peripheral Control functions
  12:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  13:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  14:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @attention
  15:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  16:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  17:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  18:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  19:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  20:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  21:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  22:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  24:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  25:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  27:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *      without specific prior written permission.
  28:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  29:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
ARM GAS  /tmp/ccGJOy3d.s 			page 2


  32:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  33:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  40:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   ******************************************************************************
  41:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  42:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  43:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  44:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #include "stm32l4xx_hal.h"
  45:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  46:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @addtogroup STM32L4xx_HAL_Driver
  47:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  48:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  49:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  50:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR PWR
  51:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief PWR HAL module driver
  52:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  53:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  54:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  55:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  56:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  57:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  58:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/ 
  59:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  60:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
  61:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  62:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  63:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
  64:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  65:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  66:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */ 
  67:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_MODE_IT               ((uint32_t)0x00010000)  /*!< Mask for interruption yielded by PVD
  68:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_MODE_EVT              ((uint32_t)0x00020000)  /*!< Mask for event yielded by PVD thresh
  69:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_RISING_EDGE           ((uint32_t)0x00000001)  /*!< Mask for rising edge set as PVD trig
  70:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #define PVD_FALLING_EDGE          ((uint32_t)0x00000002)  /*!< Mask for falling edge set as PVD tri
  71:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
  72:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
  73:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  74:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  75:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
  76:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
  77:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  78:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
  79:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  80:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  81:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  82:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
  83:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  84:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  85:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  86:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
  87:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  88:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
ARM GAS  /tmp/ccGJOy3d.s 			page 3


  89:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  90:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
  91:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @verbatim
  92:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
  93:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  94:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
  95:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
  96:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
  97:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @endverbatim
  98:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
  99:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
 103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
  28              		.loc 1 106 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  40              		.loc 1 107 0
  41 0004 074A     		ldr	r2, .L2
  42 0006 074B     		ldr	r3, .L2
  43 0008 9B6B     		ldr	r3, [r3, #56]
  44 000a 43F08053 		orr	r3, r3, #268435456
  45 000e 9363     		str	r3, [r2, #56]
 108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  46              		.loc 1 108 0
  47 0010 044A     		ldr	r2, .L2
  48 0012 044B     		ldr	r3, .L2
  49 0014 9B6B     		ldr	r3, [r3, #56]
  50 0016 23F08053 		bic	r3, r3, #268435456
  51 001a 9363     		str	r3, [r2, #56]
 109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
  52              		.loc 1 109 0
  53 001c BD46     		mov	sp, r7
  54              	.LCFI2:
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 001e 5DF8047B 		ldr	r7, [sp], #4
  58              	.LCFI3:
  59              		.cfi_restore 7
  60              		.cfi_def_cfa_offset 0
  61 0022 7047     		bx	lr
  62              	.L3:
  63              		.align	2
ARM GAS  /tmp/ccGJOy3d.s 			page 4


  64              	.L2:
  65 0024 00100240 		.word	1073876992
  66              		.cfi_endproc
  67              	.LFE125:
  69              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  70              		.align	2
  71              		.global	HAL_PWR_EnableBkUpAccess
  72              		.thumb
  73              		.thumb_func
  75              	HAL_PWR_EnableBkUpAccess:
  76              	.LFB126:
 110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable access to the backup domain 
 113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  After reset, the backup domain is protected against 
 115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        possible unwanted write accesses.
 116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  RTCSEL that sets the RTC clock source selection is in the RTC back-up domain.
 117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        In order to set or modify the RTC clock, the backup domain access must be
 118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        disabled. 
 119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        back-up domain.                
 121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
  77              		.loc 1 124 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              	.LCFI4:
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 7, -4
  86 0002 00AF     		add	r7, sp, #0
  87              	.LCFI5:
  88              		.cfi_def_cfa_register 7
 125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);    
  89              		.loc 1 125 0
  90 0004 044A     		ldr	r2, .L5
  91 0006 044B     		ldr	r3, .L5
  92 0008 1B68     		ldr	r3, [r3]
  93 000a 43F48073 		orr	r3, r3, #256
  94 000e 1360     		str	r3, [r2]
 126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
  95              		.loc 1 126 0
  96 0010 BD46     		mov	sp, r7
  97              	.LCFI6:
  98              		.cfi_def_cfa_register 13
  99              		@ sp needed
 100 0012 5DF8047B 		ldr	r7, [sp], #4
 101              	.LCFI7:
 102              		.cfi_restore 7
 103              		.cfi_def_cfa_offset 0
 104 0016 7047     		bx	lr
 105              	.L6:
ARM GAS  /tmp/ccGJOy3d.s 			page 5


 106              		.align	2
 107              	.L5:
 108 0018 00700040 		.word	1073770496
 109              		.cfi_endproc
 110              	.LFE126:
 112              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
 113              		.align	2
 114              		.global	HAL_PWR_DisableBkUpAccess
 115              		.thumb
 116              		.thumb_func
 118              	HAL_PWR_DisableBkUpAccess:
 119              	.LFB127:
 127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable access to the backup domain
 130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).    
 131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 120              		.loc 1 134 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              	.LCFI8:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 00AF     		add	r7, sp, #0
 130              	.LCFI9:
 131              		.cfi_def_cfa_register 7
 135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);   
 132              		.loc 1 135 0
 133 0004 044A     		ldr	r2, .L8
 134 0006 044B     		ldr	r3, .L8
 135 0008 1B68     		ldr	r3, [r3]
 136 000a 23F48073 		bic	r3, r3, #256
 137 000e 1360     		str	r3, [r2]
 136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 138              		.loc 1 136 0
 139 0010 BD46     		mov	sp, r7
 140              	.LCFI10:
 141              		.cfi_def_cfa_register 13
 142              		@ sp needed
 143 0012 5DF8047B 		ldr	r7, [sp], #4
 144              	.LCFI11:
 145              		.cfi_restore 7
 146              		.cfi_def_cfa_offset 0
 147 0016 7047     		bx	lr
 148              	.L9:
 149              		.align	2
 150              	.L8:
 151 0018 00700040 		.word	1073770496
 152              		.cfi_endproc
 153              	.LFE127:
 155              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
ARM GAS  /tmp/ccGJOy3d.s 			page 6


 156              		.align	2
 157              		.global	HAL_PWR_ConfigPVD
 158              		.thumb
 159              		.thumb_func
 161              	HAL_PWR_ConfigPVD:
 162              	.LFB128:
 137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @}
 143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions
 148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *
 150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @verbatim
 151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
 153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  ===============================================================================
 155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  
 156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      *** PVD configuration ***
 158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     =========================
 159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in PWR_CR2 register).
 162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) PVDO flag is available to indicate if VDD/VDDA is higher or lower
 164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****  
 169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     
 170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     ================================
 172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WakeUp pins are used to wakeup the system from Standby mode or Shutdown mode. 
 174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The polarity of these pins can be set to configure event detection on high 
 175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           level (rising edge) or low level (falling edge).
 176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    
 179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** Low Power modes configuration ***
 180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     =====================================
 181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The devices feature 8 low-power modes:
 183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Low-power Run mode: core and peripherals are running, regulator in low power mode.
 184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running, regulator in normal mode.
 185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Low-power Sleep mode: Cortex-M4 core stopped, peripherals kept running, regulator in low 
 186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Stop 1 mode: all clocks are stopped except LSI and LSE, regulator in normal or low power 
 187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Stop 2 mode: all clocks are stopped except LSI and LSE, regulator in low power mode, redu
ARM GAS  /tmp/ccGJOy3d.s 			page 7


 188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Standby mode with SRAM2: all clocks are stopped except LSI and LSE, SRAM2 content preserv
 189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Standby mode without SRAM2: all clocks are stopped except LSI and LSE, regulator off.
 190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Shutdown mode: all clocks are stopped except LSE, regulator off.       
 191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Low-power run mode ***
 194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ==========================
 195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry: (from main run mode)
 197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) set LPR bit with HAL_PWREx_EnableLowPowerRunMode() API after having decreased the syst
 198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      
 199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit:
 200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) clear LPR bit then wait for REGLP bit to be reset with HAL_PWREx_DisableLowPowerRunMod
 201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              then can the system clock frequency be increased above 2 MHz.
 202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Sleep mode / Low-power sleep mode ***
 205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    =========================================
 206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:                                                         
 208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Sleep mode / Low-power Sleep mode is entered thru HAL_PWR_EnterSLEEPMode() API
 209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           in specifying whether or not the regulator is forced to low-power mode and if exit is int
 210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode).              
 211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON: Low-power sleep (regulator in low power mode).
 212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           In the latter case, the system clock frequency must have been decreased below 2 MHz befor
 213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      
 216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              controller (NVIC) or any wake-up event.
 219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              
 220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:
 221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) Any wake-up event such as an EXTI line configured in event mode.             
 222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              
 223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****          [..] When exiting the Low-power sleep mode by issuing an interrupt or a wakeup event, 
 224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              the MCU is in Low-power Run mode. 
 225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Stop 1 and Stop 2 modes ***
 227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ===============================
 228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:                                                 
 230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Stop 1 or Stop 2 modes are entered thru the following API's:
 231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) HAL_PWR_EnterSTOPMode() [for legacy porting reasons] or HAL_PWREx_EnterSTOP1Mode() f
 232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP2Mode for mode 2.  
 233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Regulator setting (applicable to Stop 1 mode only):
 234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON
 235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON
 236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit (interrupt or event-triggered, specified when entering STOP mode):
 237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter Stop mode with WFI instruction
 238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter Stop mode with WFE instruction
 239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           
 240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFI Exit:
 241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt mode.
 242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Some specific communication peripherals (USART, LPUART, I2C) interrupts 
 243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                when programmed in wakeup mode. 
 244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) WFE Exit:  
ARM GAS  /tmp/ccGJOy3d.s 			page 8


 245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Event mode.
 246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****        
 247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****        [..]                      
 248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           When exiting Stop 1 mode, the MCU is either in Run mode or in Low-power Run mode
 249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           depending on the LPR bit setting. 
 250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           When exiting Stop 2 mode, the MCU is in Run mode. 
 251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Standby mode ***
 253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ====================
 254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The Standby mode offers two options: 
 256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) option a) all clocks off except LSI and LSE, RRS bit set (keeps voltage regulator in low 
 257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for the SRAM2 content, the RTC registers, RTC b
 258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         and Standby circuitry.      
 259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) option b) all clocks off except LSI and LSE, RRS bit cleared (voltage regulator then disa
 260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and register contents are lost except for the RTC registers, RTC backup registers 
 261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         and Standby circuitry.
 262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (++) Entry:                                    
 264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (+++) The Standby mode is entered thru HAL_PWR_EnterSTANDBYMode() API. 
 265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****            SRAM1 and register contents are lost except for registers in the Backup domain and 
 266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****            Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 regis
 267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****            To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetention() A
 268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****            to set RRS bit.   
 269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           
 270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (++) Exit:
 271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (+++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event, 
 272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                external reset in NRST pin, IWDG reset.
 273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                 
 274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       [..]    After waking up from Standby mode, program execution restarts in the same way as afte
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           
 276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     *** Shutdown mode ***
 278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    ======================
 279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****      [..]
 280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       In Shutdown mode, 
 281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         voltage regulator is disabled, all clocks are off except LSE, RRS bit is cleared.
 282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         SRAM and registers contents are lost except for backup domain registers.
 283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Entry:                                    
 285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           The Shutdown mode is entered thru HAL_PWREx_EnterSHUTDOWNMode() API.
 286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           
 287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) Exit:
 288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event, 
 289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                external reset in NRST pin.
 290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****                
 291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****          [..] After waking up from Shutdown mode, program execution restarts in the same way as aft
 292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    =============================================
 296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     [..]
 297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       Wakeup event, a tamper event or a time-stamp event, without depending on
 299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       an external interrupt (Auto-wakeup mode).
 300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       (+) RTC auto-wakeup (AWU) from the Stop, Standby and Shutdown modes
ARM GAS  /tmp/ccGJOy3d.s 			page 9


 302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****              HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****               configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUpTimer
 313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** @endverbatim
 315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @{
 316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Configure the voltage threshold detected by the Power Voltage Detector (PVD).
 322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param sConfigPVD: pointer to a PWR_PVDTypeDef structure that contains the PVD 
 323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        configuration information.
 324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         more details about the voltage thresholds corresponding to each
 326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         detection level.
 327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 163              		.loc 1 330 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 8
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168 0000 80B4     		push	{r7}
 169              	.LCFI12:
 170              		.cfi_def_cfa_offset 4
 171              		.cfi_offset 7, -4
 172 0002 83B0     		sub	sp, sp, #12
 173              	.LCFI13:
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              	.LCFI14:
 177              		.cfi_def_cfa_register 7
 178 0006 7860     		str	r0, [r7, #4]
 331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set PLS bits according to PVDLevel value */
 336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 179              		.loc 1 336 0
 180 0008 2B49     		ldr	r1, .L16
 181 000a 2B4B     		ldr	r3, .L16
 182 000c 5B68     		ldr	r3, [r3, #4]
 183 000e 23F00E02 		bic	r2, r3, #14
 184 0012 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccGJOy3d.s 			page 10


 185 0014 1B68     		ldr	r3, [r3]
 186 0016 1343     		orrs	r3, r3, r2
 187 0018 4B60     		str	r3, [r1, #4]
 337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 188              		.loc 1 339 0
 189 001a 284A     		ldr	r2, .L16+4
 190 001c 274B     		ldr	r3, .L16+4
 191 001e 5B68     		ldr	r3, [r3, #4]
 192 0020 23F48033 		bic	r3, r3, #65536
 193 0024 5360     		str	r3, [r2, #4]
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 194              		.loc 1 340 0
 195 0026 254A     		ldr	r2, .L16+4
 196 0028 244B     		ldr	r3, .L16+4
 197 002a 1B68     		ldr	r3, [r3]
 198 002c 23F48033 		bic	r3, r3, #65536
 199 0030 1360     		str	r3, [r2]
 341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 200              		.loc 1 341 0
 201 0032 224A     		ldr	r2, .L16+4
 202 0034 214B     		ldr	r3, .L16+4
 203 0036 DB68     		ldr	r3, [r3, #12]
 204 0038 23F48033 		bic	r3, r3, #65536
 205 003c D360     		str	r3, [r2, #12]
 342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 206              		.loc 1 342 0
 207 003e 1F4A     		ldr	r2, .L16+4
 208 0040 1E4B     		ldr	r3, .L16+4
 209 0042 9B68     		ldr	r3, [r3, #8]
 210 0044 23F48033 		bic	r3, r3, #65536
 211 0048 9360     		str	r3, [r2, #8]
 343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure interrupt mode */
 345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 212              		.loc 1 345 0
 213 004a 7B68     		ldr	r3, [r7, #4]
 214 004c 5B68     		ldr	r3, [r3, #4]
 215 004e 03F48033 		and	r3, r3, #65536
 216 0052 002B     		cmp	r3, #0
 217 0054 05D0     		beq	.L11
 346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 218              		.loc 1 347 0
 219 0056 194A     		ldr	r2, .L16+4
 220 0058 184B     		ldr	r3, .L16+4
 221 005a 1B68     		ldr	r3, [r3]
 222 005c 43F48033 		orr	r3, r3, #65536
 223 0060 1360     		str	r3, [r2]
 224              	.L11:
 348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure event mode */
 351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 225              		.loc 1 351 0
 226 0062 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccGJOy3d.s 			page 11


 227 0064 5B68     		ldr	r3, [r3, #4]
 228 0066 03F40033 		and	r3, r3, #131072
 229 006a 002B     		cmp	r3, #0
 230 006c 05D0     		beq	.L12
 352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 231              		.loc 1 353 0
 232 006e 134A     		ldr	r2, .L16+4
 233 0070 124B     		ldr	r3, .L16+4
 234 0072 5B68     		ldr	r3, [r3, #4]
 235 0074 43F48033 		orr	r3, r3, #65536
 236 0078 5360     		str	r3, [r2, #4]
 237              	.L12:
 354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Configure the edge */
 357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 238              		.loc 1 357 0
 239 007a 7B68     		ldr	r3, [r7, #4]
 240 007c 5B68     		ldr	r3, [r3, #4]
 241 007e 03F00103 		and	r3, r3, #1
 242 0082 002B     		cmp	r3, #0
 243 0084 05D0     		beq	.L13
 358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 244              		.loc 1 359 0
 245 0086 0D4A     		ldr	r2, .L16+4
 246 0088 0C4B     		ldr	r3, .L16+4
 247 008a 9B68     		ldr	r3, [r3, #8]
 248 008c 43F48033 		orr	r3, r3, #65536
 249 0090 9360     		str	r3, [r2, #8]
 250              	.L13:
 360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 251              		.loc 1 362 0
 252 0092 7B68     		ldr	r3, [r7, #4]
 253 0094 5B68     		ldr	r3, [r3, #4]
 254 0096 03F00203 		and	r3, r3, #2
 255 009a 002B     		cmp	r3, #0
 256 009c 05D0     		beq	.L14
 363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 257              		.loc 1 364 0
 258 009e 074A     		ldr	r2, .L16+4
 259 00a0 064B     		ldr	r3, .L16+4
 260 00a2 DB68     		ldr	r3, [r3, #12]
 261 00a4 43F48033 		orr	r3, r3, #65536
 262 00a8 D360     		str	r3, [r2, #12]
 263              	.L14:
 365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   return HAL_OK;
 264              		.loc 1 367 0
 265 00aa 0023     		movs	r3, #0
 368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 266              		.loc 1 368 0
ARM GAS  /tmp/ccGJOy3d.s 			page 12


 267 00ac 1846     		mov	r0, r3
 268 00ae 0C37     		adds	r7, r7, #12
 269              	.LCFI15:
 270              		.cfi_def_cfa_offset 4
 271 00b0 BD46     		mov	sp, r7
 272              	.LCFI16:
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 00b2 5DF8047B 		ldr	r7, [sp], #4
 276              	.LCFI17:
 277              		.cfi_restore 7
 278              		.cfi_def_cfa_offset 0
 279 00b6 7047     		bx	lr
 280              	.L17:
 281              		.align	2
 282              	.L16:
 283 00b8 00700040 		.word	1073770496
 284 00bc 00040140 		.word	1073808384
 285              		.cfi_endproc
 286              	.LFE128:
 288              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 289              		.align	2
 290              		.global	HAL_PWR_EnablePVD
 291              		.thumb
 292              		.thumb_func
 294              	HAL_PWR_EnablePVD:
 295              	.LFB129:
 369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable the Power Voltage Detector (PVD).
 373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 296              		.loc 1 376 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301 0000 80B4     		push	{r7}
 302              	.LCFI18:
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 00AF     		add	r7, sp, #0
 306              	.LCFI19:
 307              		.cfi_def_cfa_register 7
 377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);  
 308              		.loc 1 377 0
 309 0004 044A     		ldr	r2, .L19
 310 0006 044B     		ldr	r3, .L19
 311 0008 5B68     		ldr	r3, [r3, #4]
 312 000a 43F00103 		orr	r3, r3, #1
 313 000e 5360     		str	r3, [r2, #4]
 378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 314              		.loc 1 378 0
 315 0010 BD46     		mov	sp, r7
ARM GAS  /tmp/ccGJOy3d.s 			page 13


 316              	.LCFI20:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 0012 5DF8047B 		ldr	r7, [sp], #4
 320              	.LCFI21:
 321              		.cfi_restore 7
 322              		.cfi_def_cfa_offset 0
 323 0016 7047     		bx	lr
 324              	.L20:
 325              		.align	2
 326              	.L19:
 327 0018 00700040 		.word	1073770496
 328              		.cfi_endproc
 329              	.LFE129:
 331              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 332              		.align	2
 333              		.global	HAL_PWR_DisablePVD
 334              		.thumb
 335              		.thumb_func
 337              	HAL_PWR_DisablePVD:
 338              	.LFB130:
 379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable the Power Voltage Detector (PVD).
 382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 339              		.loc 1 385 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344 0000 80B4     		push	{r7}
 345              	.LCFI22:
 346              		.cfi_def_cfa_offset 4
 347              		.cfi_offset 7, -4
 348 0002 00AF     		add	r7, sp, #0
 349              	.LCFI23:
 350              		.cfi_def_cfa_register 7
 386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);   
 351              		.loc 1 386 0
 352 0004 044A     		ldr	r2, .L22
 353 0006 044B     		ldr	r3, .L22
 354 0008 5B68     		ldr	r3, [r3, #4]
 355 000a 23F00103 		bic	r3, r3, #1
 356 000e 5360     		str	r3, [r2, #4]
 387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 357              		.loc 1 387 0
 358 0010 BD46     		mov	sp, r7
 359              	.LCFI24:
 360              		.cfi_def_cfa_register 13
 361              		@ sp needed
 362 0012 5DF8047B 		ldr	r7, [sp], #4
 363              	.LCFI25:
 364              		.cfi_restore 7
 365              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccGJOy3d.s 			page 14


 366 0016 7047     		bx	lr
 367              	.L23:
 368              		.align	2
 369              	.L22:
 370 0018 00700040 		.word	1073770496
 371              		.cfi_endproc
 372              	.LFE130:
 374              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 375              		.align	2
 376              		.global	HAL_PWR_EnableWakeUpPin
 377              		.thumb
 378              		.thumb_func
 380              	HAL_PWR_EnableWakeUpPin:
 381              	.LFB131:
 388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable the WakeUp PINx functionality.
 394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinPolarity: Specifies which Wake-Up pin to enable.
 395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following legacy values which set the default polarity
 396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         i.e. detection on high level (rising edge):
 397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_P
 398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *             
 399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         or one of the following value where the user can explicitly specify the enabled pin and
 400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         the chosen polarity:  
 401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1_HIGH or PWR_WAKEUP_PIN1_LOW 
 402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2_HIGH or PWR_WAKEUP_PIN2_LOW 
 403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3_HIGH or PWR_WAKEUP_PIN3_LOW 
 404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN4_HIGH or PWR_WAKEUP_PIN4_LOW
 405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW 
 406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.               
 407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 382              		.loc 1 410 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 8
 385              		@ frame_needed = 1, uses_anonymous_args = 0
 386              		@ link register save eliminated.
 387 0000 80B4     		push	{r7}
 388              	.LCFI26:
 389              		.cfi_def_cfa_offset 4
 390              		.cfi_offset 7, -4
 391 0002 83B0     		sub	sp, sp, #12
 392              	.LCFI27:
 393              		.cfi_def_cfa_offset 16
 394 0004 00AF     		add	r7, sp, #0
 395              	.LCFI28:
 396              		.cfi_def_cfa_register 7
 397 0006 7860     		str	r0, [r7, #4]
 411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity)); 
 412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Specifies the Wake-Up pin polarity for the event detection 
 414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     (rising or falling edge) */
ARM GAS  /tmp/ccGJOy3d.s 			page 15


 415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_S
 398              		.loc 1 415 0
 399 0008 0C49     		ldr	r1, .L25
 400 000a 0C4B     		ldr	r3, .L25
 401 000c DA68     		ldr	r2, [r3, #12]
 402 000e 7B68     		ldr	r3, [r7, #4]
 403 0010 03F01F03 		and	r3, r3, #31
 404 0014 DB43     		mvns	r3, r3
 405 0016 1A40     		ands	r2, r2, r3
 406 0018 7B68     		ldr	r3, [r7, #4]
 407 001a 5B09     		lsrs	r3, r3, #5
 408 001c 1343     		orrs	r3, r3, r2
 409 001e CB60     		str	r3, [r1, #12]
 416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     
 417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Enable wake-up pin */
 418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 410              		.loc 1 418 0
 411 0020 0649     		ldr	r1, .L25
 412 0022 064B     		ldr	r3, .L25
 413 0024 9A68     		ldr	r2, [r3, #8]
 414 0026 7B68     		ldr	r3, [r7, #4]
 415 0028 03F01F03 		and	r3, r3, #31
 416 002c 1343     		orrs	r3, r3, r2
 417 002e 8B60     		str	r3, [r1, #8]
 419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     
 421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 418              		.loc 1 421 0
 419 0030 0C37     		adds	r7, r7, #12
 420              	.LCFI29:
 421              		.cfi_def_cfa_offset 4
 422 0032 BD46     		mov	sp, r7
 423              	.LCFI30:
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0034 5DF8047B 		ldr	r7, [sp], #4
 427              	.LCFI31:
 428              		.cfi_restore 7
 429              		.cfi_def_cfa_offset 0
 430 0038 7047     		bx	lr
 431              	.L26:
 432 003a 00BF     		.align	2
 433              	.L25:
 434 003c 00700040 		.word	1073770496
 435              		.cfi_endproc
 436              	.LFE131:
 438              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 439              		.align	2
 440              		.global	HAL_PWR_DisableWakeUpPin
 441              		.thumb
 442              		.thumb_func
 444              	HAL_PWR_DisableWakeUpPin:
 445              	.LFB132:
 422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable the WakeUp PINx functionality.
 425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
ARM GAS  /tmp/ccGJOy3d.s 			page 16


 426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_P
 428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 446              		.loc 1 431 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 8
 449              		@ frame_needed = 1, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451 0000 80B4     		push	{r7}
 452              	.LCFI32:
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 7, -4
 455 0002 83B0     		sub	sp, sp, #12
 456              	.LCFI33:
 457              		.cfi_def_cfa_offset 16
 458 0004 00AF     		add	r7, sp, #0
 459              	.LCFI34:
 460              		.cfi_def_cfa_register 7
 461 0006 7860     		str	r0, [r7, #4]
 432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR3, WakeUpPinx); 
 462              		.loc 1 434 0
 463 0008 0549     		ldr	r1, .L28
 464 000a 054B     		ldr	r3, .L28
 465 000c 9A68     		ldr	r2, [r3, #8]
 466 000e 7B68     		ldr	r3, [r7, #4]
 467 0010 DB43     		mvns	r3, r3
 468 0012 1340     		ands	r3, r3, r2
 469 0014 8B60     		str	r3, [r1, #8]
 435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 470              		.loc 1 435 0
 471 0016 0C37     		adds	r7, r7, #12
 472              	.LCFI35:
 473              		.cfi_def_cfa_offset 4
 474 0018 BD46     		mov	sp, r7
 475              	.LCFI36:
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 001a 5DF8047B 		ldr	r7, [sp], #4
 479              	.LCFI37:
 480              		.cfi_restore 7
 481              		.cfi_def_cfa_offset 0
 482 001e 7047     		bx	lr
 483              	.L29:
 484              		.align	2
 485              	.L28:
 486 0020 00700040 		.word	1073770496
 487              		.cfi_endproc
 488              	.LFE132:
 490              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 491              		.align	2
 492              		.global	HAL_PWR_EnterSLEEPMode
 493              		.thumb
ARM GAS  /tmp/ccGJOy3d.s 			page 17


 494              		.thumb_func
 496              	HAL_PWR_EnterSLEEPMode:
 497              	.LFB133:
 436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Sleep or Low-power Sleep mode.
 440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Sleep/Low-power Sleep mode, all I/O pins keep the same state as in Run mode.
 441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Sleep/Low-power Sleep mode.
 442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode)
 444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Low-power Sleep mode (regulator in low-power mode) 
 445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  Low-power Sleep mode is entered from Low-power Run mode. Therefore, if not yet 
 446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        in Low-power Run mode before calling HAL_PWR_EnterSLEEPMode() with Regulator set 
 447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        to PWR_LOWPOWERREGULATOR_ON, the user can optionally configure the    
 448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Flash in power-down monde in setting the SLEEP_PD bit in FLASH_ACR register.
 449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Additionally, the clock frequency must be reduced below 2 MHz.
 450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Setting SLEEP_PD in FLASH_ACR then appropriately reducing the clock frequency must 
 451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        be done before calling HAL_PWR_EnterSLEEPMode() API. 
 452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When exiting Low-power Sleep mode, the MCU is in Low-power Run mode. To move in 
 453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Run mode, the user must resort to HAL_PWREx_DisableLowPowerRunMode() API.       
 454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if Sleep mode is entered with WFI or WFE instruction.
 455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter Sleep or Low-power Sleep mode with WFI instruction
 457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter Sleep or Low-power Sleep mode with WFE instruction
 458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as 
 459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        the interrupt wake up source.   
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 498              		.loc 1 463 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 8
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502 0000 80B5     		push	{r7, lr}
 503              	.LCFI38:
 504              		.cfi_def_cfa_offset 8
 505              		.cfi_offset 7, -8
 506              		.cfi_offset 14, -4
 507 0002 82B0     		sub	sp, sp, #8
 508              	.LCFI39:
 509              		.cfi_def_cfa_offset 16
 510 0004 00AF     		add	r7, sp, #0
 511              	.LCFI40:
 512              		.cfi_def_cfa_register 7
 513 0006 7860     		str	r0, [r7, #4]
 514 0008 0B46     		mov	r3, r1
 515 000a FB70     		strb	r3, [r7, #3]
 464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Check the parameters */
 465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set Regulator parameter */
 469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if (Regulator == PWR_MAINREGULATOR_ON)
 516              		.loc 1 469 0
 517 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccGJOy3d.s 			page 18


 518 000e 002B     		cmp	r3, #0
 519 0010 08D1     		bne	.L31
 470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* If in low-power run mode at this point, exit it */
 472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 520              		.loc 1 472 0
 521 0012 114B     		ldr	r3, .L36
 522 0014 5B69     		ldr	r3, [r3, #20]
 523 0016 03F40073 		and	r3, r3, #512
 524 001a 002B     		cmp	r3, #0
 525 001c 0AD0     		beq	.L33
 473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     {
 474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       HAL_PWREx_DisableLowPowerRunMode();  
 526              		.loc 1 474 0
 527 001e FFF7FEFF 		bl	HAL_PWREx_DisableLowPowerRunMode
 528 0022 07E0     		b	.L33
 529              	.L31:
 475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     } 
 476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Regulator now in main mode. */
 477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   else
 479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* If in run mode, first move to low-power run mode.
 481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****        The system clock frequency must be below 2 MHz at this point. */
 482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 530              		.loc 1 482 0
 531 0024 0C4B     		ldr	r3, .L36
 532 0026 5B69     		ldr	r3, [r3, #20]
 533 0028 03F40073 		and	r3, r3, #512
 534 002c 002B     		cmp	r3, #0
 535 002e 01D1     		bne	.L33
 483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     {
 484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****       HAL_PWREx_EnableLowPowerRunMode();  
 536              		.loc 1 484 0
 537 0030 FFF7FEFF 		bl	HAL_PWREx_EnableLowPowerRunMode
 538              	.L33:
 485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     } 
 486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   } 
 487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     
 488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 539              		.loc 1 489 0
 540 0034 094A     		ldr	r2, .L36+4
 541 0036 094B     		ldr	r3, .L36+4
 542 0038 1B69     		ldr	r3, [r3, #16]
 543 003a 23F00403 		bic	r3, r3, #4
 544 003e 1361     		str	r3, [r2, #16]
 490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   
 491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 545              		.loc 1 492 0
 546 0040 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 547 0042 012B     		cmp	r3, #1
 548 0044 01D1     		bne	.L34
 549              	.LBB12:
 550              	.LBB13:
 551              		.file 2 "Drivers/CMSIS/Include/core_cmInstr.h"
ARM GAS  /tmp/ccGJOy3d.s 			page 19


   1:Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V4.10
   5:Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     18. March 2015
   6:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGJOy3d.s 			page 20


  58:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB() do {\
  93:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  94:Drivers/CMSIS/Include/core_cmInstr.h ****                    __isb(0xF);\
  95:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  96:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
  97:Drivers/CMSIS/Include/core_cmInstr.h **** 
  98:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:Drivers/CMSIS/Include/core_cmInstr.h **** 
 100:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 103:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB() do {\
 104:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 105:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dsb(0xF);\
 106:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 107:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 108:Drivers/CMSIS/Include/core_cmInstr.h **** 
 109:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 114:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB() do {\
ARM GAS  /tmp/ccGJOy3d.s 			page 21


 115:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 116:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dmb(0xF);\
 117:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 118:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 119:Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:Drivers/CMSIS/Include/core_cmInstr.h **** 
 122:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:Drivers/CMSIS/Include/core_cmInstr.h **** 
 124:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 126:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 127:Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 128:Drivers/CMSIS/Include/core_cmInstr.h **** 
 129:Drivers/CMSIS/Include/core_cmInstr.h **** 
 130:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:Drivers/CMSIS/Include/core_cmInstr.h **** 
 132:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:Drivers/CMSIS/Include/core_cmInstr.h **** 
 134:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 136:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 137:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:Drivers/CMSIS/Include/core_cmInstr.h **** {
 140:Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 141:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 142:Drivers/CMSIS/Include/core_cmInstr.h **** }
 143:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 144:Drivers/CMSIS/Include/core_cmInstr.h **** 
 145:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:Drivers/CMSIS/Include/core_cmInstr.h **** 
 147:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:Drivers/CMSIS/Include/core_cmInstr.h **** 
 149:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 151:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 152:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:Drivers/CMSIS/Include/core_cmInstr.h **** {
 155:Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 156:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 157:Drivers/CMSIS/Include/core_cmInstr.h **** }
 158:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 159:Drivers/CMSIS/Include/core_cmInstr.h **** 
 160:Drivers/CMSIS/Include/core_cmInstr.h **** 
 161:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 168:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 169:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 170:Drivers/CMSIS/Include/core_cmInstr.h **** 
 171:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGJOy3d.s 			page 22


 172:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 173:Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:Drivers/CMSIS/Include/core_cmInstr.h **** 
 177:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 180:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:Drivers/CMSIS/Include/core_cmInstr.h **** 
 182:Drivers/CMSIS/Include/core_cmInstr.h **** 
 183:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:Drivers/CMSIS/Include/core_cmInstr.h **** 
 187:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 189:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 190:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:Drivers/CMSIS/Include/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 193:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:Drivers/CMSIS/Include/core_cmInstr.h **** {
 195:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 196:Drivers/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:Drivers/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:Drivers/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:Drivers/CMSIS/Include/core_cmInstr.h ****   {
 201:Drivers/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 202:Drivers/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 203:Drivers/CMSIS/Include/core_cmInstr.h ****     s--;
 204:Drivers/CMSIS/Include/core_cmInstr.h ****   }
 205:Drivers/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 207:Drivers/CMSIS/Include/core_cmInstr.h **** }
 208:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 209:Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:Drivers/CMSIS/Include/core_cmInstr.h **** 
 211:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 212:Drivers/CMSIS/Include/core_cmInstr.h **** 
 213:Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 217:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 218:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 219:Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:Drivers/CMSIS/Include/core_cmInstr.h **** 
 221:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:Drivers/CMSIS/Include/core_cmInstr.h **** 
 223:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:Drivers/CMSIS/Include/core_cmInstr.h **** 
 225:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccGJOy3d.s 			page 23


 229:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 230:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:Drivers/CMSIS/Include/core_cmInstr.h **** 
 233:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:Drivers/CMSIS/Include/core_cmInstr.h **** 
 235:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:Drivers/CMSIS/Include/core_cmInstr.h **** 
 237:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 240:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:Drivers/CMSIS/Include/core_cmInstr.h **** 
 243:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:Drivers/CMSIS/Include/core_cmInstr.h **** 
 245:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:Drivers/CMSIS/Include/core_cmInstr.h **** 
 247:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 250:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:Drivers/CMSIS/Include/core_cmInstr.h **** 
 253:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:Drivers/CMSIS/Include/core_cmInstr.h **** 
 255:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:Drivers/CMSIS/Include/core_cmInstr.h **** 
 257:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 258:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 260:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 261:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 262:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:Drivers/CMSIS/Include/core_cmInstr.h **** 
 265:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:Drivers/CMSIS/Include/core_cmInstr.h **** 
 267:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:Drivers/CMSIS/Include/core_cmInstr.h **** 
 269:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 270:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 272:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 273:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 274:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:Drivers/CMSIS/Include/core_cmInstr.h **** 
 276:Drivers/CMSIS/Include/core_cmInstr.h **** 
 277:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:Drivers/CMSIS/Include/core_cmInstr.h **** 
 279:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 282:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 284:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 285:Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccGJOy3d.s 			page 24


 286:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:Drivers/CMSIS/Include/core_cmInstr.h **** 
 288:Drivers/CMSIS/Include/core_cmInstr.h **** 
 289:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 294:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 295:Drivers/CMSIS/Include/core_cmInstr.h **** 
 296:Drivers/CMSIS/Include/core_cmInstr.h **** 
 297:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 298:Drivers/CMSIS/Include/core_cmInstr.h **** 
 299:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 300:Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 304:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 305:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 306:Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:Drivers/CMSIS/Include/core_cmInstr.h **** 
 308:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 311:Drivers/CMSIS/Include/core_cmInstr.h **** 
 312:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 315:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 316:Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 317:Drivers/CMSIS/Include/core_cmInstr.h **** 
 318:Drivers/CMSIS/Include/core_cmInstr.h **** 
 319:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:Drivers/CMSIS/Include/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:Drivers/CMSIS/Include/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:Drivers/CMSIS/Include/core_cmInstr.h **** 
 324:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 326:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 327:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:Drivers/CMSIS/Include/core_cmInstr.h **** {
 330:Drivers/CMSIS/Include/core_cmInstr.h ****   rrx r0, r0
 331:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 332:Drivers/CMSIS/Include/core_cmInstr.h **** }
 333:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 334:Drivers/CMSIS/Include/core_cmInstr.h **** 
 335:Drivers/CMSIS/Include/core_cmInstr.h **** 
 336:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:Drivers/CMSIS/Include/core_cmInstr.h **** 
 338:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:Drivers/CMSIS/Include/core_cmInstr.h **** 
 340:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/ccGJOy3d.s 			page 25


 343:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:Drivers/CMSIS/Include/core_cmInstr.h **** 
 345:Drivers/CMSIS/Include/core_cmInstr.h **** 
 346:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:Drivers/CMSIS/Include/core_cmInstr.h **** 
 348:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:Drivers/CMSIS/Include/core_cmInstr.h **** 
 350:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 353:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:Drivers/CMSIS/Include/core_cmInstr.h **** 
 356:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:Drivers/CMSIS/Include/core_cmInstr.h **** 
 358:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:Drivers/CMSIS/Include/core_cmInstr.h **** 
 360:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 363:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:Drivers/CMSIS/Include/core_cmInstr.h **** 
 366:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:Drivers/CMSIS/Include/core_cmInstr.h **** 
 368:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:Drivers/CMSIS/Include/core_cmInstr.h **** 
 370:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 371:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 373:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:Drivers/CMSIS/Include/core_cmInstr.h **** 
 376:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:Drivers/CMSIS/Include/core_cmInstr.h **** 
 378:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:Drivers/CMSIS/Include/core_cmInstr.h **** 
 380:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 381:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 383:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:Drivers/CMSIS/Include/core_cmInstr.h **** 
 390:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 391:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 393:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:Drivers/CMSIS/Include/core_cmInstr.h **** 
 395:Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:Drivers/CMSIS/Include/core_cmInstr.h **** 
 398:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
ARM GAS  /tmp/ccGJOy3d.s 			page 26


 400:Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 408:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 411:Drivers/CMSIS/Include/core_cmInstr.h **** 
 412:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 413:Drivers/CMSIS/Include/core_cmInstr.h **** 
 414:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 416:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:Drivers/CMSIS/Include/core_cmInstr.h **** {
 418:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 419:Drivers/CMSIS/Include/core_cmInstr.h **** }
 420:Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:Drivers/CMSIS/Include/core_cmInstr.h **** 
 422:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:Drivers/CMSIS/Include/core_cmInstr.h **** 
 424:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 426:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 427:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:Drivers/CMSIS/Include/core_cmInstr.h **** {
 429:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 552              		.loc 2 429 0
 553              	@ 429 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 554 0046 30BF     		wfi
 555              	@ 0 "" 2
 556              		.thumb
 557              	.LBE13:
 558              	.LBE12:
 559 0048 02E0     		b	.L30
 560              	.L34:
 561              	.LBB14:
 562              	.LBB15:
 430:Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 434:Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 438:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:Drivers/CMSIS/Include/core_cmInstr.h **** {
 440:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:Drivers/CMSIS/Include/core_cmInstr.h **** }
 442:Drivers/CMSIS/Include/core_cmInstr.h **** 
 443:Drivers/CMSIS/Include/core_cmInstr.h **** 
 444:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 445:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccGJOy3d.s 			page 27


 446:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 448:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:Drivers/CMSIS/Include/core_cmInstr.h **** {
 450:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 563              		.loc 2 450 0
 564              	@ 450 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 565 004a 40BF     		sev
 566              	@ 0 "" 2
 567              		.thumb
 568              	.LBE15:
 569              	.LBE14:
 570              	.LBB16:
 571              	.LBB17:
 440:Drivers/CMSIS/Include/core_cmInstr.h **** }
 572              		.loc 2 440 0
 573              	@ 440 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 574 004c 20BF     		wfe
 575              	@ 0 "" 2
 576              		.thumb
 577              	.LBE17:
 578              	.LBE16:
 579              	.LBB18:
 580              	.LBB19:
 581              	@ 440 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 582 004e 20BF     		wfe
 583              	@ 0 "" 2
 584              		.thumb
 585              	.L30:
 586              	.LBE19:
 587              	.LBE18:
 493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFI();
 496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   else
 498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   {
 499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     /* Request Wait For Event */
 500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __SEV();
 501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFE();
 502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****     __WFE();
 503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   }
 504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 588              		.loc 1 505 0
 589 0050 0837     		adds	r7, r7, #8
 590              	.LCFI41:
 591              		.cfi_def_cfa_offset 8
 592 0052 BD46     		mov	sp, r7
 593              	.LCFI42:
 594              		.cfi_def_cfa_register 13
 595              		@ sp needed
 596 0054 80BD     		pop	{r7, pc}
 597              	.L37:
 598 0056 00BF     		.align	2
 599              	.L36:
 600 0058 00700040 		.word	1073770496
ARM GAS  /tmp/ccGJOy3d.s 			page 28


 601 005c 00ED00E0 		.word	-536810240
 602              		.cfi_endproc
 603              	.LFE133:
 605              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 606              		.align	2
 607              		.global	HAL_PWR_EnterSTOPMode
 608              		.thumb
 609              		.thumb_func
 611              	HAL_PWR_EnterSTOPMode:
 612              	.LFB134:
 506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Stop 1 mode
 510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  This API is named HAL_PWR_EnterSTOPMode to ensure compatibility with legacy code running
 511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        on devices where only "Stop mode" is mentioned. On STM32L4, Stop 1 mode and Stop modes
 512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        are equivalent. 
 513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Stop 1 mode, all I/O pins keep the same state as in Run mode.          
 514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI, 
 515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
 516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
 517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
 518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        only to the peripheral requesting it.
 519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        SRAM1, SRAM2 and register contents are preserved.
 520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The BOR is available.
 521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The voltage regulator can be configured either in normal or low-power mode.  
 522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When exiting Stop 1 mode by issuing an interrupt or a wakeup event,
 523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
 524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.  
 525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
 526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop 1 mode.
 527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop 1 mode, the consumption
 528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop 1 mode.
 530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop 1 mode with regulator ON
 532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop 1 mode with low power regulator ON  
 533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @param STOPEntry: Specifies if Stop 1 mode in entered with WFI or WFE instruction.
 534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI:Enter Stop 1 mode with WFI instruction
 536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop 1 mode with WFE instruction           
 537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 613              		.loc 1 540 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 8
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617 0000 80B5     		push	{r7, lr}
 618              	.LCFI43:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 82B0     		sub	sp, sp, #8
 623              	.LCFI44:
 624              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccGJOy3d.s 			page 29


 625 0004 00AF     		add	r7, sp, #0
 626              	.LCFI45:
 627              		.cfi_def_cfa_register 7
 628 0006 7860     		str	r0, [r7, #4]
 629 0008 0B46     		mov	r3, r1
 630 000a FB70     		strb	r3, [r7, #3]
 541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   HAL_PWREx_EnterSTOP1Mode(Regulator, STOPEntry);
 631              		.loc 1 541 0
 632 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 633 000e 7868     		ldr	r0, [r7, #4]
 634 0010 1946     		mov	r1, r3
 635 0012 FFF7FEFF 		bl	HAL_PWREx_EnterSTOP1Mode
 542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 636              		.loc 1 542 0
 637 0016 0837     		adds	r7, r7, #8
 638              	.LCFI46:
 639              		.cfi_def_cfa_offset 8
 640 0018 BD46     		mov	sp, r7
 641              	.LCFI47:
 642              		.cfi_def_cfa_register 13
 643              		@ sp needed
 644 001a 80BD     		pop	{r7, pc}
 645              		.cfi_endproc
 646              	.LFE134:
 648              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 649              		.align	2
 650              		.global	HAL_PWR_EnterSTANDBYMode
 651              		.thumb
 652              		.thumb_func
 654              	HAL_PWR_EnterSTANDBYMode:
 655              	.LFB135:
 543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enter Standby mode.
 546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  In Standby mode, the PLL, the HSI, the MSI and the HSE oscillators are switched 
 547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        off. The voltage regulator is disabled, except when SRAM2 content is preserved
 548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        in which case the regulator is in low-power mode. 
 549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        SRAM1 and register contents are lost except for registers in the Backup domain and 
 550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 regis
 551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetention() A
 552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        to set RRS bit.   
 553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        The BOR is available.  
 554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
 555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() respectively enable Pull
 556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        Pull Down state, HAL_PWREx_DisableGPIOPullUp() and HAL_PWREx_DisableGPIOPullDown() disab
 557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        same.
 558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        These states are effective in Standby mode only if APC bit is set through
 559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *        HAL_PWREx_EnablePullUpPullDownConfig() API.        
 560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 656              		.loc 1 563 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 1, uses_anonymous_args = 0
 660              		@ link register save eliminated.
ARM GAS  /tmp/ccGJOy3d.s 			page 30


 661 0000 80B4     		push	{r7}
 662              	.LCFI48:
 663              		.cfi_def_cfa_offset 4
 664              		.cfi_offset 7, -4
 665 0002 00AF     		add	r7, sp, #0
 666              	.LCFI49:
 667              		.cfi_def_cfa_register 7
 564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set Stand-by mode */
 565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 668              		.loc 1 565 0
 669 0004 094A     		ldr	r2, .L40
 670 0006 094B     		ldr	r3, .L40
 671 0008 1B68     		ldr	r3, [r3]
 672 000a 23F00703 		bic	r3, r3, #7
 673 000e 43F00303 		orr	r3, r3, #3
 674 0012 1360     		str	r3, [r2]
 566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 675              		.loc 1 568 0
 676 0014 064A     		ldr	r2, .L40+4
 677 0016 064B     		ldr	r3, .L40+4
 678 0018 1B69     		ldr	r3, [r3, #16]
 679 001a 43F00403 		orr	r3, r3, #4
 680 001e 1361     		str	r3, [r2, #16]
 681              	.LBB20:
 682              	.LBB21:
 429:Drivers/CMSIS/Include/core_cmInstr.h **** }
 683              		.loc 2 429 0
 684              	@ 429 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 685 0020 30BF     		wfi
 686              	@ 0 "" 2
 687              		.thumb
 688              	.LBE21:
 689              	.LBE20:
 569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /* This option is used to ensure that store operations are completed */
 571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #if defined ( __CC_ARM)
 572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __force_stores();
 573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** #endif
 574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   __WFI();
 576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 690              		.loc 1 576 0
 691 0022 BD46     		mov	sp, r7
 692              	.LCFI50:
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 0024 5DF8047B 		ldr	r7, [sp], #4
 696              	.LCFI51:
 697              		.cfi_restore 7
 698              		.cfi_def_cfa_offset 0
 699 0028 7047     		bx	lr
 700              	.L41:
 701 002a 00BF     		.align	2
 702              	.L40:
 703 002c 00700040 		.word	1073770496
ARM GAS  /tmp/ccGJOy3d.s 			page 31


 704 0030 00ED00E0 		.word	-536810240
 705              		.cfi_endproc
 706              	.LFE135:
 708              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 709              		.align	2
 710              		.global	HAL_PWR_EnableSleepOnExit
 711              		.thumb
 712              		.thumb_func
 714              	HAL_PWR_EnableSleepOnExit:
 715              	.LFB136:
 577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Indicate Sleep-On-Exit when returning from Handler mode to Thread mode. 
 582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       interruptions handling.         
 586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 716              		.loc 1 589 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              	.LCFI52:
 723              		.cfi_def_cfa_offset 4
 724              		.cfi_offset 7, -4
 725 0002 00AF     		add	r7, sp, #0
 726              	.LCFI53:
 727              		.cfi_def_cfa_register 7
 590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 728              		.loc 1 591 0
 729 0004 044A     		ldr	r2, .L43
 730 0006 044B     		ldr	r3, .L43
 731 0008 1B69     		ldr	r3, [r3, #16]
 732 000a 43F00203 		orr	r3, r3, #2
 733 000e 1361     		str	r3, [r2, #16]
 592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 734              		.loc 1 592 0
 735 0010 BD46     		mov	sp, r7
 736              	.LCFI54:
 737              		.cfi_def_cfa_register 13
 738              		@ sp needed
 739 0012 5DF8047B 		ldr	r7, [sp], #4
 740              	.LCFI55:
 741              		.cfi_restore 7
 742              		.cfi_def_cfa_offset 0
 743 0016 7047     		bx	lr
 744              	.L44:
 745              		.align	2
 746              	.L43:
ARM GAS  /tmp/ccGJOy3d.s 			page 32


 747 0018 00ED00E0 		.word	-536810240
 748              		.cfi_endproc
 749              	.LFE136:
 751              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 752              		.align	2
 753              		.global	HAL_PWR_DisableSleepOnExit
 754              		.thumb
 755              		.thumb_func
 757              	HAL_PWR_DisableSleepOnExit:
 758              	.LFB137:
 593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 759              		.loc 1 602 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763              		@ link register save eliminated.
 764 0000 80B4     		push	{r7}
 765              	.LCFI56:
 766              		.cfi_def_cfa_offset 4
 767              		.cfi_offset 7, -4
 768 0002 00AF     		add	r7, sp, #0
 769              	.LCFI57:
 770              		.cfi_def_cfa_register 7
 603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 771              		.loc 1 604 0
 772 0004 044A     		ldr	r2, .L46
 773 0006 044B     		ldr	r3, .L46
 774 0008 1B69     		ldr	r3, [r3, #16]
 775 000a 23F00203 		bic	r3, r3, #2
 776 000e 1361     		str	r3, [r2, #16]
 605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 777              		.loc 1 605 0
 778 0010 BD46     		mov	sp, r7
 779              	.LCFI58:
 780              		.cfi_def_cfa_register 13
 781              		@ sp needed
 782 0012 5DF8047B 		ldr	r7, [sp], #4
 783              	.LCFI59:
 784              		.cfi_restore 7
 785              		.cfi_def_cfa_offset 0
 786 0016 7047     		bx	lr
 787              	.L47:
 788              		.align	2
 789              	.L46:
 790 0018 00ED00E0 		.word	-536810240
 791              		.cfi_endproc
 792              	.LFE137:
ARM GAS  /tmp/ccGJOy3d.s 			page 33


 794              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 795              		.align	2
 796              		.global	HAL_PWR_EnableSEVOnPend
 797              		.thumb
 798              		.thumb_func
 800              	HAL_PWR_EnableSEVOnPend:
 801              	.LFB138:
 606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Enable CORTEX M4 SEVONPEND bit. 
 611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes 
 612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 802              		.loc 1 616 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 807 0000 80B4     		push	{r7}
 808              	.LCFI60:
 809              		.cfi_def_cfa_offset 4
 810              		.cfi_offset 7, -4
 811 0002 00AF     		add	r7, sp, #0
 812              	.LCFI61:
 813              		.cfi_def_cfa_register 7
 617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 814              		.loc 1 618 0
 815 0004 044A     		ldr	r2, .L49
 816 0006 044B     		ldr	r3, .L49
 817 0008 1B69     		ldr	r3, [r3, #16]
 818 000a 43F01003 		orr	r3, r3, #16
 819 000e 1361     		str	r3, [r2, #16]
 619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 820              		.loc 1 619 0
 821 0010 BD46     		mov	sp, r7
 822              	.LCFI62:
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0012 5DF8047B 		ldr	r7, [sp], #4
 826              	.LCFI63:
 827              		.cfi_restore 7
 828              		.cfi_def_cfa_offset 0
 829 0016 7047     		bx	lr
 830              	.L50:
 831              		.align	2
 832              	.L49:
 833 0018 00ED00E0 		.word	-536810240
 834              		.cfi_endproc
 835              	.LFE138:
 837              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 838              		.align	2
ARM GAS  /tmp/ccGJOy3d.s 			page 34


 839              		.global	HAL_PWR_DisableSEVOnPend
 840              		.thumb
 841              		.thumb_func
 843              	HAL_PWR_DisableSEVOnPend:
 844              	.LFB139:
 620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief Disable CORTEX M4 SEVONPEND bit. 
 624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes 
 625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 845              		.loc 1 629 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 850 0000 80B4     		push	{r7}
 851              	.LCFI64:
 852              		.cfi_def_cfa_offset 4
 853              		.cfi_offset 7, -4
 854 0002 00AF     		add	r7, sp, #0
 855              	.LCFI65:
 856              		.cfi_def_cfa_register 7
 630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 857              		.loc 1 631 0
 858 0004 044A     		ldr	r2, .L52
 859 0006 044B     		ldr	r3, .L52
 860 0008 1B69     		ldr	r3, [r3, #16]
 861 000a 23F01003 		bic	r3, r3, #16
 862 000e 1361     		str	r3, [r2, #16]
 632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 863              		.loc 1 632 0
 864 0010 BD46     		mov	sp, r7
 865              	.LCFI66:
 866              		.cfi_def_cfa_register 13
 867              		@ sp needed
 868 0012 5DF8047B 		ldr	r7, [sp], #4
 869              	.LCFI67:
 870              		.cfi_restore 7
 871              		.cfi_def_cfa_offset 0
 872 0016 7047     		bx	lr
 873              	.L53:
 874              		.align	2
 875              	.L52:
 876 0018 00ED00E0 		.word	-536810240
 877              		.cfi_endproc
 878              	.LFE139:
 880              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 881              		.align	2
 882              		.weak	HAL_PWR_PVDCallback
 883              		.thumb
 884              		.thumb_func
ARM GAS  /tmp/ccGJOy3d.s 			page 35


 886              	HAL_PWR_PVDCallback:
 887              	.LFB140:
 633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** 
 638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** /**
 639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @brief PWR PVD interrupt callback
 640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   * @retval None
 641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   */
 642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** {
 888              		.loc 1 643 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 1, uses_anonymous_args = 0
 892              		@ link register save eliminated.
 893 0000 80B4     		push	{r7}
 894              	.LCFI68:
 895              		.cfi_def_cfa_offset 4
 896              		.cfi_offset 7, -4
 897 0002 00AF     		add	r7, sp, #0
 898              	.LCFI69:
 899              		.cfi_def_cfa_register 7
 644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****             the HAL_PWR_PVDCallback can be implemented in the user file
 646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c ****    */
 647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c **** }
 900              		.loc 1 647 0
 901 0004 BD46     		mov	sp, r7
 902              	.LCFI70:
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 0006 5DF8047B 		ldr	r7, [sp], #4
 906              	.LCFI71:
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 000a 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE140:
 913              		.text
 914              	.Letext0:
 915              		.file 3 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/machine/_default_types.h"
 916              		.file 4 "/opt/gcc-arm-none-eabi-4_9-2015q3/arm-none-eabi/include/sys/_stdint.h"
 917              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 918              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 919              		.file 7 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 920              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 921              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr.h"
ARM GAS  /tmp/ccGJOy3d.s 			page 36


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l4xx_hal_pwr.c
     /tmp/ccGJOy3d.s:20     .text.HAL_PWR_DeInit:00000000 $t
     /tmp/ccGJOy3d.s:25     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
     /tmp/ccGJOy3d.s:65     .text.HAL_PWR_DeInit:00000024 $d
     /tmp/ccGJOy3d.s:70     .text.HAL_PWR_EnableBkUpAccess:00000000 $t
     /tmp/ccGJOy3d.s:75     .text.HAL_PWR_EnableBkUpAccess:00000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccGJOy3d.s:108    .text.HAL_PWR_EnableBkUpAccess:00000018 $d
     /tmp/ccGJOy3d.s:113    .text.HAL_PWR_DisableBkUpAccess:00000000 $t
     /tmp/ccGJOy3d.s:118    .text.HAL_PWR_DisableBkUpAccess:00000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccGJOy3d.s:151    .text.HAL_PWR_DisableBkUpAccess:00000018 $d
     /tmp/ccGJOy3d.s:156    .text.HAL_PWR_ConfigPVD:00000000 $t
     /tmp/ccGJOy3d.s:161    .text.HAL_PWR_ConfigPVD:00000000 HAL_PWR_ConfigPVD
     /tmp/ccGJOy3d.s:283    .text.HAL_PWR_ConfigPVD:000000b8 $d
     /tmp/ccGJOy3d.s:289    .text.HAL_PWR_EnablePVD:00000000 $t
     /tmp/ccGJOy3d.s:294    .text.HAL_PWR_EnablePVD:00000000 HAL_PWR_EnablePVD
     /tmp/ccGJOy3d.s:327    .text.HAL_PWR_EnablePVD:00000018 $d
     /tmp/ccGJOy3d.s:332    .text.HAL_PWR_DisablePVD:00000000 $t
     /tmp/ccGJOy3d.s:337    .text.HAL_PWR_DisablePVD:00000000 HAL_PWR_DisablePVD
     /tmp/ccGJOy3d.s:370    .text.HAL_PWR_DisablePVD:00000018 $d
     /tmp/ccGJOy3d.s:375    .text.HAL_PWR_EnableWakeUpPin:00000000 $t
     /tmp/ccGJOy3d.s:380    .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccGJOy3d.s:434    .text.HAL_PWR_EnableWakeUpPin:0000003c $d
     /tmp/ccGJOy3d.s:439    .text.HAL_PWR_DisableWakeUpPin:00000000 $t
     /tmp/ccGJOy3d.s:444    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccGJOy3d.s:486    .text.HAL_PWR_DisableWakeUpPin:00000020 $d
     /tmp/ccGJOy3d.s:491    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
     /tmp/ccGJOy3d.s:496    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccGJOy3d.s:600    .text.HAL_PWR_EnterSLEEPMode:00000058 $d
     /tmp/ccGJOy3d.s:606    .text.HAL_PWR_EnterSTOPMode:00000000 $t
     /tmp/ccGJOy3d.s:611    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
     /tmp/ccGJOy3d.s:649    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
     /tmp/ccGJOy3d.s:654    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccGJOy3d.s:703    .text.HAL_PWR_EnterSTANDBYMode:0000002c $d
     /tmp/ccGJOy3d.s:709    .text.HAL_PWR_EnableSleepOnExit:00000000 $t
     /tmp/ccGJOy3d.s:714    .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccGJOy3d.s:747    .text.HAL_PWR_EnableSleepOnExit:00000018 $d
     /tmp/ccGJOy3d.s:752    .text.HAL_PWR_DisableSleepOnExit:00000000 $t
     /tmp/ccGJOy3d.s:757    .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccGJOy3d.s:790    .text.HAL_PWR_DisableSleepOnExit:00000018 $d
     /tmp/ccGJOy3d.s:795    .text.HAL_PWR_EnableSEVOnPend:00000000 $t
     /tmp/ccGJOy3d.s:800    .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccGJOy3d.s:833    .text.HAL_PWR_EnableSEVOnPend:00000018 $d
     /tmp/ccGJOy3d.s:838    .text.HAL_PWR_DisableSEVOnPend:00000000 $t
     /tmp/ccGJOy3d.s:843    .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccGJOy3d.s:876    .text.HAL_PWR_DisableSEVOnPend:00000018 $d
     /tmp/ccGJOy3d.s:881    .text.HAL_PWR_PVDCallback:00000000 $t
     /tmp/ccGJOy3d.s:886    .text.HAL_PWR_PVDCallback:00000000 HAL_PWR_PVDCallback
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_PWREx_DisableLowPowerRunMode
HAL_PWREx_EnableLowPowerRunMode
HAL_PWREx_EnterSTOP1Mode
